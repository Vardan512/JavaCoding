/**
 * Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
 * The same repeated number may be chosen from C unlimited number of times.
 * Note:
 *      All numbers (including target) will be positive integers.
 *      Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
 *      The solution set must not contain duplicate combinations.
 * For example, given candidate set 2,3,6,7 and target 7, 
 * A solution set is: 
 * [7] 
 * [2, 2, 3] 
 */
 
public class Solution {
    public List<List<Integer>> combinationSum(int[] can, int target) {
        List<List<Integer>> rst=new ArrayList<>();
        if(can.length==0)
        {
            return rst;
        }
        Arrays.sort(can);
        back(rst, new ArrayList<>(), can, target, 0, 0);
        return rst;
    }
    void back(List<List<Integer>> rst, List<Integer> arr, int[] can, int target, int sum ,int pos)
    {
        if(sum==target)
        {
            rst.add(new ArrayList<>(arr));
        }
        for(int i=pos; i< can.length; i++)
        {
            if(sum+can[i]> target)
            {
                break;
            }
            arr.add(can[i]);
            back(rst, arr, can, target, sum+can[i], i);
            arr.remove(arr.size()-1 );
        }
    }
}
