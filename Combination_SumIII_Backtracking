/*Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]
*/

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> rst=new ArrayList<>();
        if(n<=0)
        {
            return rst;
        }
        back(rst, new ArrayList<>(), k, n, 0, 1 );
        return rst;
    }
    void back(List<List<Integer>> rst, List<Integer> ab, int k, int n, int sum, int pos)
    {
        if(sum==n && ab.size()==k)
        {
            rst.add(new ArrayList<>(ab));
            sum=0;
        }
        for(int i=pos;i<=9 ;i++)
        {
            if(sum+1 >n || ab.size()>k )
            {
                break;
            }
            ab.add(i);
            back(rst, ab, k, n, sum+i, i+1);
            ab.remove(ab.size()-1);
        }
    }
}
